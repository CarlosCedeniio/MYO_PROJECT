// C++ program to find groups of unknown
// Points using K nearest neighbour algorithm.
#include <bits/stdc++.h>

#include <string>
#include <vector>
#include <sstream> //istringstream
#include <iostream> // cout
#include <fstream> // ifstream
using namespace std;

struct Point
{
    int val;     // Group of point
    double s1_s, s2_s,s3_s,s4_s,s5_s,s6_s,s7_s,s8_s;
    double s1_p, s2_p,s3_p,s4_p,s5_p,s6_p,s7_p,s8_p;
    double s1_m, s2_m,s3_m,s4_m,s5_m,s6_m,s7_m,s8_m;
    double s1_r, s2_r,s3_r,s4_r,s5_r,s6_r,s7_r,s8_r;// Co-ordinate of point
    double distance; // Distance from test point
};


/**
 * Reads csv file into table, exported as a vector of vector of doubles.
 * @param inputFileName input file name (full path).
 * @return data as vector of vector of doubles.
 */
vector<vector<double>> parse2DCsvFile(string inputFileName) {

    vector<vector<double> > data;
    ifstream inputFile(inputFileName);
    int l = 0;

    while (inputFile) {
        l++;
        string s;
        if (!getline(inputFile, s)) break;
        if (s[0] != '#') {
            istringstream ss(s);
            vector<double> record;

            while (ss) {
                string line;
                if (!getline(ss, line, ';'))
                    break;
                try {
                    record.push_back(stof(line));
                }
                catch (const std::invalid_argument e) {
                    cout << "NaN found in file " << inputFileName << " line " << l
                         << endl;
                    e.what();
                }
            }

            data.push_back(record);
        }
    }

    if (!inputFile.eof()) {
        cerr << "Could not read file " << inputFileName << "\n";
        __throw_invalid_argument("File not found.");
    }

    return data;
}






// Used to sort an array of points by increasing
// order of distance
bool comparison(Point a, Point b)
{
    return (a.distance < b.distance);
}

// This function finds classification of point p using
// k nearest neighbour algorithm. It assumes only two
// groups and returns 0 if p belongs to group 0, else
// 1 (belongs to group 1).
int classifyAPoint(Point arr[], int n, int k, Point p)
{
    // Fill distances of all points from p
    for (int i = 0; i < n; i++)
        arr[i].distance =
            sqrt((arr[i].s1_s - p.s1_s) * (arr[i].s1_s - p.s1_s) +
                 (arr[i].s1_p - p.s1_p) * (arr[i].s1_p - p.s1_p) + (arr[i].s1_m - p.s1_m) * (arr[i].s1_m - p.s1_m) +
				 (arr[i].s1_r - p.s1_r) * (arr[i].s1_r - p.s1_r) + (arr[i].s2_s - p.s2_s) * (arr[i].s2_s - p.s2_s) +
				 (arr[i].s2_p - p.s2_p) * (arr[i].s2_p - p.s2_p) + (arr[i].s2_m - p.s2_m) * (arr[i].s2_m - p.s2_m) +
				 (arr[i].s2_r - p.s2_r) * (arr[i].s2_r - p.s2_r) + (arr[i].s3_s - p.s3_s) * (arr[i].s3_s - p.s3_s) +
				 (arr[i].s3_p - p.s3_p) * (arr[i].s3_p - p.s3_p) + (arr[i].s3_m - p.s3_m) * (arr[i].s3_m - p.s3_m) +
				 (arr[i].s3_r - p.s3_r) * (arr[i].s3_r - p.s3_r) + (arr[i].s4_s - p.s4_s) * (arr[i].s4_s - p.s4_s) +
				 (arr[i].s4_p - p.s4_p) * (arr[i].s4_p - p.s4_p) + (arr[i].s4_m - p.s4_m) * (arr[i].s4_m - p.s4_m) +
				 (arr[i].s4_r - p.s4_r) * (arr[i].s4_r - p.s4_r) + (arr[i].s5_s - p.s5_s) * (arr[i].s5_s - p.s5_s) +
				 (arr[i].s5_p - p.s5_p) * (arr[i].s5_p - p.s5_p) + (arr[i].s5_m - p.s5_m) * (arr[i].s5_m - p.s5_m) +
				 (arr[i].s5_r - p.s5_r) * (arr[i].s5_r - p.s5_r) + (arr[i].s6_s - p.s6_s) * (arr[i].s6_s - p.s6_s) +
				 (arr[i].s6_p - p.s6_p) * (arr[i].s6_p - p.s6_p) + (arr[i].s6_m - p.s6_m) * (arr[i].s6_m - p.s6_m) +
				 (arr[i].s6_r - p.s6_r) * (arr[i].s6_r - p.s6_r) + (arr[i].s7_s - p.s7_s) * (arr[i].s7_s - p.s7_s) +
				 (arr[i].s7_p - p.s7_p) * (arr[i].s7_p - p.s7_p) + (arr[i].s7_m - p.s7_m) * (arr[i].s7_m - p.s7_m) +
				 (arr[i].s7_r - p.s7_r) * (arr[i].s7_r - p.s7_r) + (arr[i].s8_s - p.s8_s) * (arr[i].s8_s - p.s8_s) +
				 (arr[i].s8_p - p.s8_p) * (arr[i].s8_p - p.s8_p) + (arr[i].s8_m - p.s8_m) * (arr[i].s8_m - p.s8_m) +
				 (arr[i].s8_r - p.s8_r) * (arr[i].s8_r - p.s8_r));

    // Sort the Points by distance from p
    sort(arr, arr+n, comparison);

    // Now consider the first k elements and only
    // two groups
    int freq1 = 0;     // Frequency of group 0
    int freq2 = 0;		// Frequency of group 1
    int freq3= 0;

    for (int i = 0; i < k; i++)
    {
        if (arr[i].val == 0)
            freq1++;
        else if (arr[i].val == 1)
            freq2++;
        else if (arr[i].val == 2)
            freq3++;
    }
    if (freq1>freq2 and freq1 > freq3 )
    	return (0);
    if (freq2>freq1 and freq2 > freq3 )
        return (1);
    if (freq3>freq1 and freq3 > freq2 )
        return (2);

    return (100);
}

// Driver code
int main()
{
	vector<vector<double>> data = parse2DCsvFile("C:\\Users\\carlo\\eclipse-workspace\\pueeeb\\src\\primerDataset12_2.csv");
	int n = 36; // Number of data points
	Point arr[n];
	int ni=0;


	    for (auto l : data) {
	        arr[ni].s1_s= l[0];
	        arr[ni].s1_p= l[1];
	        arr[ni].s1_m= l[2];
	        arr[ni].s1_r= l[3];

	        arr[ni].s2_s= l[4];
	        arr[ni].s2_p= l[5];
	        arr[ni].s2_m= l[6];
	        arr[ni].s2_r= l[7];

	        arr[ni].s3_s= l[8];
	        arr[ni].s3_p= l[9];
	        arr[ni].s3_m= l[10];
	        arr[ni].s3_r= l[11];

	        arr[ni].s4_s= l[12];
	        arr[ni].s4_p= l[13];
	        arr[ni].s4_m= l[14];
	        arr[ni].s4_r= l[15];

	        arr[ni].s5_s= l[16];
	        arr[ni].s5_p= l[17];
	        arr[ni].s5_m= l[18];
	        arr[ni].s5_r= l[19];

	        arr[ni].s6_s= l[20];
	        arr[ni].s6_p= l[21];
	        arr[ni].s6_m= l[22];
	        arr[ni].s6_r= l[23];

	        arr[ni].s7_s= l[24];
	        arr[ni].s7_p= l[25];
	        arr[ni].s7_m= l[26];
	        arr[ni].s7_r= l[27];

	        arr[ni].s8_s= l[28];
	        arr[ni].s8_p= l[29];
	        arr[ni].s8_m= l[30];
	        arr[ni].s8_r= l[31];

	        arr[ni].val= l[32];

	        ni++;
	    }


    Point p;
    p.s1_s= -413;
	p.s1_p= -0.688333;
	p.s1_m= -1;
	p.s1_r= 18.59019;

	p.s2_s= -441;
	p.s2_p= -0.735;
	p.s2_m= -1;
	p.s2_r= 12.3367;

	p.s3_s= -516;
	p.s3_p= -0.86;
	p.s3_m= -1;
	p.s3_r= 9.9106;

	p.s4_s= -402;
	p.s4_p= -0.67;
	p.s4_m= -1;
	p.s4_r= 5.743;

	p.s5_s= -410;
	p.s5_p= -0.6833;
	p.s5_m= -1;
	p.s5_r= 11.212;

	p.s6_s= -409;
	p.s6_p= -0.681;
	p.s6_m= -1.5;
	p.s6_r= 15.056;

	p.s7_s= -410;
	p.s7_p= -0.6833;
	p.s7_m= -1;
	p.s7_r= 7.336;

	p.s8_s= -441;
	p.s8_p= -0.735;
	p.s8_m= -1;
	p.s8_r= 14.226;


    // Parameter to decide groupr of the testing point
    int k = 7;
    printf ("The value classified to unknown point"
            " is %d.\n", classifyAPoint(arr, n, k, p));
    return 0;
}
